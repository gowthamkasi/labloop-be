/**\n * HIPAA Compliance Middleware\n * Healthcare data protection and compliance validation\n */\n\nimport { FastifyRequest, FastifyReply } from 'fastify';\nimport { container, TYPES } from '@/config/Container.js';\nimport { ILogger } from '@/shared/utils/Logger.js';\nimport { HttpStatus } from '@/shared/constants/HttpStatus.js';\nimport { HipaaComplianceError } from '@/domain/user/exceptions/index.js';\n\nexport interface HipaaComplianceOptions {\n  enforceEncryption?: boolean;\n  requireAuditTrail?: boolean;\n  validateDataMinimization?: boolean;\n  checkUserAuthorization?: boolean;\n  enforceRetentionPolicy?: boolean;\n}\n\nexport interface DataRetentionPolicy {\n  maxRetentionDays: number;\n  requiresPatientConsent: boolean;\n  allowsDataExport: boolean;\n  requiresSecureDeletion: boolean;\n}\n\nexport class HipaaComplianceMiddleware {\n  private logger: ILogger;\n  private readonly defaultRetentionPolicy: DataRetentionPolicy = {\n    maxRetentionDays: 2555, // 7 years as required by HIPAA\n    requiresPatientConsent: true,\n    allowsDataExport: true,\n    requiresSecureDeletion: true\n  };\n\n  constructor() {\n    this.logger = container.get<ILogger>(TYPES.Logger);\n  }\n\n  /**\n   * Main HIPAA compliance validation middleware\n   */\n  public validateCompliance(options: HipaaComplianceOptions = {}) {\n    const opts = {\n      enforceEncryption: true,\n      requireAuditTrail: true,\n      validateDataMinimization: true,\n      checkUserAuthorization: true,\n      enforceRetentionPolicy: true,\n      ...options\n    };\n\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        // Skip compliance checks for non-PHI endpoints\n        if (!this.isProtectedHealthInformationEndpoint(request.url)) {\n          return;\n        }\n\n        // Validate encryption in transit\n        if (opts.enforceEncryption && !this.isConnectionSecure(request)) {\n          this.logger.error('HIPAA Violation: Unencrypted PHI access attempt', {\n            url: request.url,\n            ip: request.ip,\n            userAgent: request.headers['user-agent'],\n            protocol: request.protocol\n          });\n          \n          throw new HipaaComplianceError(\n            'Encrypted connection required for accessing protected health information'\n          );\n        }\n\n        // Validate user authorization for PHI access\n        if (opts.checkUserAuthorization && !this.hasPhiAccessAuthorization(request)) {\n          this.logger.error('HIPAA Violation: Unauthorized PHI access attempt', {\n            url: request.url,\n            userId: (request as any).user?.userId,\n            userRole: (request as any).user?.role,\n            ip: request.ip\n          });\n          \n          throw new HipaaComplianceError(\n            'User not authorized to access protected health information'\n          );\n        }\n\n        // Validate minimum necessary data access\n        if (opts.validateDataMinimization && !this.validateMinimumNecessary(request)) {\n          this.logger.warn('HIPAA Warning: Potential data minimization violation', {\n            url: request.url,\n            userId: (request as any).user?.userId,\n            requestedFields: this.extractRequestedFields(request)\n          });\n          \n          // Add warning header but don't block request\n          reply.header('X-HIPAA-Warning', 'Data minimization review recommended');\n        }\n\n        // Validate data retention policies\n        if (opts.enforceRetentionPolicy && request.method === 'DELETE') {\n          const canDelete = await this.validateDataDeletion(request);\n          if (!canDelete) {\n            throw new HipaaComplianceError(\n              'Data retention policy prevents deletion of this record'\n            );\n          }\n        }\n\n        // Create audit trail entry\n        if (opts.requireAuditTrail) {\n          this.createHipaaAuditTrail(request);\n        }\n\n        // Add HIPAA compliance headers\n        this.addComplianceHeaders(reply);\n\n      } catch (error) {\n        if (error instanceof HipaaComplianceError) {\n          return reply.status(HttpStatus.FORBIDDEN).send({\n            error: 'HIPAA Compliance Error',\n            details: error.message,\n            code: 'HIPAA_VIOLATION'\n          });\n        }\n        throw error;\n      }\n    };\n  }\n\n  /**\n   * Patient consent validation middleware\n   */\n  public validatePatientConsent() {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      const patientId = this.extractPatientId(request);\n      \n      if (!patientId) {\n        return; // No patient context, skip consent check\n      }\n\n      // In a real implementation, this would check a consent management system\n      const hasValidConsent = await this.checkPatientConsent(patientId, request);\n      \n      if (!hasValidConsent) {\n        this.logger.error('HIPAA Violation: Patient consent required', {\n          patientId,\n          url: request.url,\n          userId: (request as any).user?.userId\n        });\n        \n        return reply.status(HttpStatus.FORBIDDEN).send({\n          error: 'Patient consent required',\n          details: 'Valid patient consent is required to access this information',\n          code: 'CONSENT_REQUIRED'\n        });\n      }\n    };\n  }\n\n  /**\n   * Data export compliance middleware\n   */\n  public validateDataExport() {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      const isExportRequest = this.isDataExportRequest(request);\n      \n      if (!isExportRequest) {\n        return;\n      }\n\n      // Validate export authorization\n      if (!this.hasDataExportAuthorization(request)) {\n        throw new HipaaComplianceError(\n          'User not authorized to export protected health information'\n        );\n      }\n\n      // Log data export attempt\n      this.logger.info('HIPAA Data Export', {\n        userId: (request as any).user?.userId,\n        userRole: (request as any).user?.role,\n        exportType: this.getExportType(request),\n        patientId: this.extractPatientId(request),\n        ip: request.ip,\n        timestamp: new Date().toISOString()\n      });\n\n      // Add export tracking headers\n      reply.header('X-Data-Export-ID', this.generateExportId());\n      reply.header('X-Export-Timestamp', new Date().toISOString());\n    };\n  }\n\n  /**\n   * Breach detection middleware\n   */\n  public monitorForBreaches() {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      // Monitor for potential security breaches\n      const suspiciousActivity = this.detectSuspiciousActivity(request);\n      \n      if (suspiciousActivity.length > 0) {\n        this.logger.error('HIPAA Security Alert: Suspicious activity detected', {\n          activities: suspiciousActivity,\n          userId: (request as any).user?.userId,\n          ip: request.ip,\n          url: request.url,\n          userAgent: request.headers['user-agent'],\n          timestamp: new Date().toISOString()\n        });\n        \n        // In a real implementation, this would trigger security alerts\n        this.triggerSecurityAlert(request, suspiciousActivity);\n      }\n    };\n  }\n\n  // Private helper methods\n\n  private isProtectedHealthInformationEndpoint(url: string): boolean {\n    const phiEndpoints = [\n      '/patients',\n      '/reports',\n      '/test-results',\n      '/medical-records',\n      '/diagnoses',\n      '/treatments',\n      '/cases',\n      '/samples'\n    ];\n    \n    return phiEndpoints.some(endpoint => url.includes(endpoint));\n  }\n\n  private isConnectionSecure(request: FastifyRequest): boolean {\n    // Check if connection is encrypted\n    return request.protocol === 'https' || \n           request.headers['x-forwarded-proto'] === 'https' ||\n           process.env.NODE_ENV === 'development'; // Allow HTTP in dev\n  }\n\n  private hasPhiAccessAuthorization(request: FastifyRequest): boolean {\n    const user = (request as any).user;\n    \n    if (!user) {\n      return false;\n    }\n\n    // Check if user has completed HIPAA training\n    // In a real implementation, this would check user's training status\n    const authorizedRoles = ['admin', 'lab_admin', 'lab_technician', 'collector'];\n    \n    return authorizedRoles.includes(user.role);\n  }\n\n  private validateMinimumNecessary(request: FastifyRequest): boolean {\n    // Validate that only minimum necessary data is being requested\n    const requestedFields = this.extractRequestedFields(request);\n    const userRole = (request as any).user?.role;\n    \n    // Define role-based data access rules\n    const roleDataAccess = {\n      'collector': ['basic_info', 'collection_data'],\n      'lab_technician': ['basic_info', 'test_data', 'results'],\n      'lab_admin': ['basic_info', 'test_data', 'results', 'reports'],\n      'admin': ['all']\n    };\n    \n    if (!userRole || !roleDataAccess[userRole as keyof typeof roleDataAccess]) {\n      return false;\n    }\n    \n    const allowedFields = roleDataAccess[userRole as keyof typeof roleDataAccess];\n    \n    // If admin or no specific fields requested, allow\n    if (allowedFields.includes('all') || requestedFields.length === 0) {\n      return true;\n    }\n    \n    // Check if requested fields are within allowed scope\n    return requestedFields.every(field => \n      allowedFields.some(allowed => field.includes(allowed))\n    );\n  }\n\n  private async validateDataDeletion(request: FastifyRequest): Promise<boolean> {\n    const resourceId = this.extractResourceId(request);\n    const retentionPolicy = this.getRetentionPolicy(request.url);\n    \n    // In a real implementation, this would check:\n    // 1. Legal hold status\n    // 2. Retention period requirements\n    // 3. Patient requests for deletion (right to be forgotten)\n    // 4. Regulatory requirements\n    \n    return retentionPolicy.allowsDataExport;\n  }\n\n  private createHipaaAuditTrail(request: FastifyRequest): void {\n    const auditRecord = {\n      timestamp: new Date().toISOString(),\n      userId: (request as any).user?.userId,\n      userRole: (request as any).user?.role,\n      action: request.method,\n      resource: request.url,\n      patientId: this.extractPatientId(request),\n      ipAddress: request.ip,\n      userAgent: request.headers['user-agent'],\n      sessionId: request.headers['x-session-id'],\n      dataAccessed: this.extractRequestedFields(request),\n      success: true, // Will be updated if request fails\n      correlationId: request.correlationId\n    };\n    \n    this.logger.info('HIPAA Audit Trail', { audit: true, ...auditRecord });\n  }\n\n  private addComplianceHeaders(reply: FastifyReply): void {\n    reply.header('X-HIPAA-Compliant', 'true');\n    reply.header('X-Data-Classification', 'PHI');\n    reply.header('X-Retention-Policy', 'HIPAA-7-Years');\n    reply.header('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');\n    reply.header('X-Content-Type-Options', 'nosniff');\n    reply.header('X-Frame-Options', 'DENY');\n  }\n\n  private extractPatientId(request: FastifyRequest): string | null {\n    const params = request.params as any;\n    const query = request.query as any;\n    const body = request.body as any;\n    \n    return params.patientId || query.patientId || body?.patientId || null;\n  }\n\n  private extractResourceId(request: FastifyRequest): string | null {\n    const params = request.params as any;\n    return params.id || params.caseId || params.reportId || null;\n  }\n\n  private extractRequestedFields(request: FastifyRequest): string[] {\n    const query = request.query as any;\n    const fields = query.fields || query.select || '';\n    \n    if (typeof fields === 'string' && fields) {\n      return fields.split(',').map((f: string) => f.trim());\n    }\n    \n    return [];\n  }\n\n  private async checkPatientConsent(patientId: string, request: FastifyRequest): Promise<boolean> {\n    // In a real implementation, this would:\n    // 1. Check consent management database\n    // 2. Validate consent scope and expiration\n    // 3. Check for consent revocation\n    // 4. Validate consent for specific use case\n    \n    // For now, return true (assuming consent exists)\n    return true;\n  }\n\n  private isDataExportRequest(request: FastifyRequest): boolean {\n    const query = request.query as any;\n    return query.export === 'true' || \n           query.download === 'true' || \n           request.url.includes('/export') ||\n           request.headers.accept?.includes('application/pdf') ||\n           request.headers.accept?.includes('text/csv');\n  }\n\n  private hasDataExportAuthorization(request: FastifyRequest): boolean {\n    const userRole = (request as any).user?.role;\n    const authorizedRoles = ['admin', 'lab_admin'];\n    return authorizedRoles.includes(userRole);\n  }\n\n  private getExportType(request: FastifyRequest): string {\n    const accept = request.headers.accept || '';\n    if (accept.includes('application/pdf')) return 'PDF';\n    if (accept.includes('text/csv')) return 'CSV';\n    if (accept.includes('application/json')) return 'JSON';\n    return 'UNKNOWN';\n  }\n\n  private generateExportId(): string {\n    return `EXP-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private getRetentionPolicy(url: string): DataRetentionPolicy {\n    // Different retention policies for different data types\n    if (url.includes('/medical-records') || url.includes('/diagnoses')) {\n      return {\n        ...this.defaultRetentionPolicy,\n        maxRetentionDays: 3650 // 10 years for medical records\n      };\n    }\n    \n    return this.defaultRetentionPolicy;\n  }\n\n  private detectSuspiciousActivity(request: FastifyRequest): string[] {\n    const suspicious: string[] = [];\n    const user = (request as any).user;\n    const query = request.query as any;\n    \n    // Check for bulk data access attempts\n    if (query.limit && parseInt(query.limit) > 1000) {\n      suspicious.push('Large data request detected');\n    }\n    \n    // Check for unusual access patterns\n    if (request.url.includes('/patients') && request.method === 'GET' && !query.patientId) {\n      suspicious.push('Bulk patient data access attempt');\n    }\n    \n    // Check for off-hours access\n    const hour = new Date().getHours();\n    if (hour < 6 || hour > 22) {\n      suspicious.push('Off-hours access detected');\n    }\n    \n    // Check for access without specific authorization\n    if (!user || !user.role) {\n      suspicious.push('Unauthenticated PHI access attempt');\n    }\n    \n    return suspicious;\n  }\n\n  private triggerSecurityAlert(request: FastifyRequest, activities: string[]): void {\n    // In a real implementation, this would:\n    // 1. Send alerts to security team\n    // 2. Log to security information and event management (SIEM) system\n    // 3. Potentially trigger automated response measures\n    // 4. Create incident tickets\n    \n    this.logger.error('HIPAA Security Alert Triggered', {\n      alert: 'SECURITY_BREACH_DETECTION',\n      activities,\n      userId: (request as any).user?.userId,\n      ip: request.ip,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Factory method for easy middleware creation\n   */\n  public static create(options?: HipaaComplianceOptions) {\n    const middleware = new HipaaComplianceMiddleware();\n    return {\n      compliance: middleware.validateCompliance(options),\n      consent: middleware.validatePatientConsent(),\n      export: middleware.validateDataExport(),\n      monitoring: middleware.monitorForBreaches()\n    };\n  }\n}"