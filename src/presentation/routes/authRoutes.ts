/**\n * Authentication Routes\n * Route definitions for authentication endpoints\n */\n\nimport { FastifyInstance } from 'fastify';\nimport { container, TYPES } from '@/config/Container.js';\nimport { AuthController } from '@/presentation/controllers/AuthController.js';\nimport { AuthenticationMiddleware } from '@/presentation/fastify/middleware/AuthenticationMiddleware.js';\nimport {\n  loginRequestSchema,\n  loginResponseSchema,\n  mobileLoginRequestSchema,\n  mobileLoginResponseSchema,\n  refreshTokenRequestSchema,\n  refreshTokenResponseSchema,\n  sessionVerifyResponseSchema,\n  logoutResponseSchema,\n  authErrorResponseSchema,\n  mobileErrorResponseSchema,\n  mobileProfileResponseSchema\n} from '@/presentation/schemas/AuthSchemas.js';\n\nexport async function authRoutes(fastify: FastifyInstance): Promise<void> {\n  const authController = container.get<AuthController>(TYPES.AuthController);\n  const authMiddleware = new AuthenticationMiddleware();\n\n  // Web Authentication Routes\n  fastify.route({\n    method: 'POST',\n    url: '/auth/login',\n    schema: {\n      description: 'User login for web application',\n      tags: ['Authentication'],\n      summary: 'Authenticate user with email and password',\n      body: loginRequestSchema,\n      response: {\n        200: loginResponseSchema,\n        401: authErrorResponseSchema,\n        423: authErrorResponseSchema, // Account locked\n        500: authErrorResponseSchema\n      }\n    },\n    handler: authController.login.bind(authController)\n  });\n\n  fastify.route({\n    method: 'POST',\n    url: '/auth/logout',\n    schema: {\n      description: 'User logout - invalidate session and tokens',\n      tags: ['Authentication'],\n      summary: 'Logout current user and clear session',\n      response: {\n        200: logoutResponseSchema,\n        500: authErrorResponseSchema\n      }\n    },\n    preHandler: authMiddleware.authenticateSession({ required: false }),\n    handler: authController.logout.bind(authController)\n  });\n\n  fastify.route({\n    method: 'GET',\n    url: '/auth/verify',\n    schema: {\n      description: 'Verify session validity',\n      tags: ['Authentication'],\n      summary: 'Check if user session is valid',\n      response: {\n        200: sessionVerifyResponseSchema,\n        401: authErrorResponseSchema\n      }\n    },\n    preHandler: AuthenticationMiddleware.createPreHandler({ required: true }),\n    handler: authController.verify.bind(authController)\n  });\n\n  // Mobile Authentication Routes\n  fastify.route({\n    method: 'POST',\n    url: '/mobile/auth/login',\n    schema: {\n      description: 'Mobile app login with device information',\n      tags: ['Mobile Auth'],\n      summary: 'Authenticate mobile app user and receive JWT tokens',\n      body: mobileLoginRequestSchema,\n      response: {\n        200: mobileLoginResponseSchema,\n        401: mobileErrorResponseSchema,\n        423: mobileErrorResponseSchema, // Account locked\n        429: mobileErrorResponseSchema, // Too many attempts\n        500: mobileErrorResponseSchema\n      }\n    },\n    handler: authController.mobileLogin.bind(authController)\n  });\n\n  fastify.route({\n    method: 'OPTIONS',\n    url: '/mobile/auth/login',\n    schema: {\n      description: 'CORS preflight for mobile login',\n      tags: ['Mobile Auth'],\n      summary: 'Handle CORS preflight request',\n      response: {\n        200: { type: 'object', properties: {} }\n      }\n    },\n    handler: authController.handleOptions.bind(authController)\n  });\n\n  fastify.route({\n    method: 'POST',\n    url: '/mobile/auth/logout',\n    schema: {\n      description: 'Mobile app logout',\n      tags: ['Mobile Auth'],\n      summary: 'Logout mobile app user and invalidate tokens',\n      body: {\n        type: 'object',\n        properties: {\n          refreshToken: { type: 'string' }\n        }\n      },\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            message: { type: 'string' }\n          }\n        }\n      }\n    },\n    preHandler: AuthenticationMiddleware.createPreHandler({ required: false }),\n    handler: authController.mobileLogout.bind(authController)\n  });\n\n  fastify.route({\n    method: 'POST',\n    url: '/mobile/auth/refresh',\n    schema: {\n      description: 'Refresh JWT access token',\n      tags: ['Mobile Auth'],\n      summary: 'Get new access token using refresh token',\n      body: refreshTokenRequestSchema,\n      response: {\n        200: refreshTokenResponseSchema,\n        401: mobileErrorResponseSchema,\n        500: mobileErrorResponseSchema\n      }\n    },\n    handler: authController.refreshToken.bind(authController)\n  });\n\n  fastify.route({\n    method: 'GET',\n    url: '/mobile/auth/profile',\n    schema: {\n      description: 'Get current user profile for mobile',\n      tags: ['Mobile Auth'],\n      summary: 'Get current user profile information',\n      response: {\n        200: mobileProfileResponseSchema,\n        401: mobileErrorResponseSchema,\n        500: mobileErrorResponseSchema\n      }\n    },\n    preHandler: AuthenticationMiddleware.createPreHandler({ required: true }),\n    handler: authController.getMobileProfile.bind(authController)\n  });\n\n  // TODO: Add password reset routes\n  // fastify.route({\n  //   method: 'POST',\n  //   url: '/auth/forgot-password',\n  //   ...\n  // });\n\n  // TODO: Add mobile registration route\n  // fastify.route({\n  //   method: 'POST',\n  //   url: '/mobile/auth/register',\n  //   ...\n  // });\n\n  // Add rate limiting for authentication endpoints\n  await fastify.register(async function (fastify) {\n    await fastify.register(import('@fastify/rate-limit'), {\n      max: 5, // 5 attempts\n      timeWindow: '15 minutes',\n      errorResponseBuilder: function (request, context) {\n        return {\n          error: 'Too many login attempts',\n          details: `Rate limit exceeded, retry after ${Math.round(context.ttl / 1000)} seconds`,\n          code: 'RATE_LIMIT_EXCEEDED'\n        };\n      }\n    });\n\n    // Apply rate limiting to login endpoints\n    fastify.post('/auth/login', { preHandler: [] }, async () => {});\n    fastify.post('/mobile/auth/login', { preHandler: [] }, async () => {});\n  });\n}\n\n// Route options for authentication\nexport const authRouteOptions = {\n  prefix: '/',\n  logLevel: 'info' as const,\n  // Enable CORS for mobile endpoints\n  preHandler: async function (request: any, reply: any) {\n    if (request.url.startsWith('/mobile/')) {\n      reply.header('Access-Control-Allow-Origin', '*');\n      reply.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n      reply.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');\n      reply.header('Access-Control-Max-Age', '86400');\n    }\n  }\n};"