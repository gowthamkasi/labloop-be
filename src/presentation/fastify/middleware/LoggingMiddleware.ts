/**\n * Logging Middleware\n * HIPAA-compliant request/response logging with audit trails\n */\n\nimport { FastifyRequest, FastifyReply } from 'fastify';\nimport { container, TYPES } from '@/config/Container.js';\nimport { ILogger } from '@/shared/utils/Logger.js';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Extend FastifyRequest to include correlation ID\ndeclare module 'fastify' {\n  interface FastifyRequest {\n    correlationId?: string;\n    startTime?: number;\n    hipaaContext?: {\n      patientId?: string;\n      caseId?: string;\n      labId?: string;\n      hospitalId?: string;\n      dataClassification: 'public' | 'internal' | 'confidential' | 'restricted';\n    };\n  }\n}\n\nexport interface LoggingOptions {\n  logRequests?: boolean;\n  logResponses?: boolean;\n  logBodies?: boolean;\n  sanitizeFields?: string[];\n  hipaaCompliant?: boolean;\n  auditLevel?: 'none' | 'basic' | 'detailed' | 'full';\n}\n\ninterface HipaaAuditEvent {\n  eventType: 'access' | 'create' | 'update' | 'delete' | 'view' | 'export';\n  userId?: string;\n  userRole?: string;\n  resource: string;\n  resourceId?: string;\n  patientId?: string;\n  success: boolean;\n  errorCode?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  timestamp: Date;\n  correlationId: string;\n  dataClassification: 'public' | 'internal' | 'confidential' | 'restricted';\n}\n\nexport class LoggingMiddleware {\n  private logger: ILogger;\n  private readonly sensitiveFields = [\n    'password',\n    'passwordHash',\n    'token',\n    'accessToken',\n    'refreshToken',\n    'apiKey',\n    'secret',\n    'ssn',\n    'socialSecurityNumber',\n    'creditCard',\n    'bankAccount'\n  ];\n\n  private readonly hipaaFields = [\n    'medicalHistory',\n    'diagnosis',\n    'testResults',\n    'treatmentPlan',\n    'medication',\n    'allergies',\n    'symptoms',\n    'patientNotes'\n  ];\n\n  constructor() {\n    this.logger = container.get<ILogger>(TYPES.Logger);\n  }\n\n  /**\n   * Request correlation and timing middleware\n   */\n  public correlationMiddleware() {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      // Generate unique correlation ID for request tracing\n      request.correlationId = request.headers['x-correlation-id'] as string || uuidv4();\n      request.startTime = Date.now();\n\n      // Add correlation ID to response headers\n      reply.header('X-Correlation-ID', request.correlationId);\n\n      // Set up HIPAA context based on route and parameters\n      request.hipaaContext = this.determineHipaaContext(request);\n\n      // Log request start\n      this.logger.info('Request started', {\n        correlationId: request.correlationId,\n        method: request.method,\n        url: request.url,\n        userAgent: request.headers['user-agent'],\n        ip: request.ip,\n        userId: (request as any).user?.userId,\n        dataClassification: request.hipaaContext.dataClassification\n      });\n    };\n  }\n\n  /**\n   * Request logging middleware with HIPAA compliance\n   */\n  public requestLoggingMiddleware(options: LoggingOptions = {}) {\n    const opts = {\n      logRequests: true,\n      logResponses: false,\n      logBodies: false,\n      hipaaCompliant: true,\n      auditLevel: 'detailed' as const,\n      ...options\n    };\n\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      if (!opts.logRequests) return;\n\n      const requestData: any = {\n        correlationId: request.correlationId,\n        method: request.method,\n        url: request.url,\n        headers: this.sanitizeHeaders(request.headers),\n        query: this.sanitizeData(request.query, opts.sanitizeFields),\n        params: this.sanitizeData(request.params),\n        ip: request.ip,\n        userAgent: request.headers['user-agent'],\n        timestamp: new Date().toISOString()\n      };\n\n      // Add user context if available\n      if ((request as any).user) {\n        requestData.user = {\n          userId: (request as any).user.userId,\n          role: (request as any).user.role,\n          labId: (request as any).user.labId,\n          hospitalId: (request as any).user.hospitalId\n        };\n      }\n\n      // Add request body if configured and appropriate\n      if (opts.logBodies && request.body && this.shouldLogBody(request)) {\n        requestData.body = this.sanitizeBody(request.body, opts.hipaaCompliant);\n      }\n\n      // Add HIPAA context\n      if (request.hipaaContext) {\n        requestData.hipaa = {\n          dataClassification: request.hipaaContext.dataClassification,\n          patientId: request.hipaaContext.patientId,\n          caseId: request.hipaaContext.caseId\n        };\n      }\n\n      this.logger.info('HTTP Request', requestData);\n\n      // Create HIPAA audit event if dealing with protected health information\n      if (opts.hipaaCompliant && this.isProtectedHealthInformation(request)) {\n        this.createHipaaAuditEvent({\n          eventType: this.mapMethodToEventType(request.method),\n          userId: (request as any).user?.userId,\n          userRole: (request as any).user?.role,\n          resource: this.extractResourceFromUrl(request.url),\n          patientId: request.hipaaContext?.patientId,\n          success: true,\n          ipAddress: request.ip,\n          userAgent: request.headers['user-agent'],\n          timestamp: new Date(),\n          correlationId: request.correlationId || uuidv4(),\n          dataClassification: request.hipaaContext?.dataClassification || 'internal'\n        });\n      }\n    };\n  }\n\n  /**\n   * Response logging middleware\n   */\n  public responseLoggingMiddleware(options: LoggingOptions = {}) {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      const originalSend = reply.send.bind(reply);\n\n      reply.send = function (payload: any) {\n        const responseTime = request.startTime ? Date.now() - request.startTime : undefined;\n        \n        const responseData: any = {\n          correlationId: request.correlationId,\n          method: request.method,\n          url: request.url,\n          statusCode: reply.statusCode,\n          responseTime,\n          timestamp: new Date().toISOString()\n        };\n\n        // Add response body if configured (be very careful with sensitive data)\n        if (options.logResponses && options.logBodies && !this.containsSensitiveData(payload)) {\n          responseData.response = payload;\n        }\n\n        // Log at appropriate level based on status code\n        if (reply.statusCode >= 500) {\n          this.logger.error('HTTP Response - Server Error', responseData);\n        } else if (reply.statusCode >= 400) {\n          this.logger.warn('HTTP Response - Client Error', responseData);\n        } else {\n          this.logger.info('HTTP Response - Success', responseData);\n        }\n\n        return originalSend(payload);\n      };\n    };\n  }\n\n  /**\n   * Error logging middleware\n   */\n  public errorLoggingMiddleware() {\n    return async (error: Error, request: FastifyRequest, reply: FastifyReply) => {\n      const errorData = {\n        correlationId: request.correlationId,\n        error: {\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n          code: (error as any).code || 'UNKNOWN_ERROR'\n        },\n        request: {\n          method: request.method,\n          url: request.url,\n          headers: this.sanitizeHeaders(request.headers),\n          ip: request.ip,\n          userAgent: request.headers['user-agent']\n        },\n        user: (request as any).user ? {\n          userId: (request as any).user.userId,\n          role: (request as any).user.role\n        } : undefined,\n        hipaa: request.hipaaContext,\n        timestamp: new Date().toISOString()\n      };\n\n      this.logger.error('Request Error', errorData);\n\n      // Create HIPAA audit event for errors involving protected health information\n      if (this.isProtectedHealthInformation(request)) {\n        this.createHipaaAuditEvent({\n          eventType: this.mapMethodToEventType(request.method),\n          userId: (request as any).user?.userId,\n          userRole: (request as any).user?.role,\n          resource: this.extractResourceFromUrl(request.url),\n          patientId: request.hipaaContext?.patientId,\n          success: false,\n          errorCode: (error as any).code || error.name,\n          ipAddress: request.ip,\n          userAgent: request.headers['user-agent'],\n          timestamp: new Date(),\n          correlationId: request.correlationId || uuidv4(),\n          dataClassification: request.hipaaContext?.dataClassification || 'internal'\n        });\n      }\n    };\n  }\n\n  /**\n   * Create HIPAA audit event\n   */\n  private createHipaaAuditEvent(event: HipaaAuditEvent): void {\n    // In a real implementation, this would be sent to a specialized audit logging system\n    // that ensures immutability and long-term retention for compliance\n    this.logger.info('HIPAA Audit Event', {\n      audit: true,\n      ...event,\n      timestamp: event.timestamp.toISOString()\n    });\n  }\n\n  /**\n   * Determine HIPAA context from request\n   */\n  private determineHipaaContext(request: FastifyRequest): NonNullable<FastifyRequest['hipaaContext']> {\n    const url = request.url;\n    const params = request.params as any;\n    const query = request.query as any;\n\n    // Default context\n    let context: NonNullable<FastifyRequest['hipaaContext']> = {\n      dataClassification: 'public'\n    };\n\n    // Determine data classification based on URL pattern\n    if (url.includes('/patients') || url.includes('/reports') || url.includes('/medical')) {\n      context.dataClassification = 'restricted'; // Highest level for patient data\n    } else if (url.includes('/cases') || url.includes('/samples') || url.includes('/tests')) {\n      context.dataClassification = 'confidential';\n    } else if (url.includes('/labs') || url.includes('/hospitals') || url.includes('/users')) {\n      context.dataClassification = 'internal';\n    }\n\n    // Extract IDs from parameters\n    if (params.patientId || query.patientId) {\n      context.patientId = params.patientId || query.patientId;\n    }\n    if (params.caseId || query.caseId) {\n      context.caseId = params.caseId || query.caseId;\n    }\n    if (params.labId || query.labId) {\n      context.labId = params.labId || query.labId;\n    }\n    if (params.hospitalId || query.hospitalId) {\n      context.hospitalId = params.hospitalId || query.hospitalId;\n    }\n\n    return context;\n  }\n\n  /**\n   * Check if request involves protected health information\n   */\n  private isProtectedHealthInformation(request: FastifyRequest): boolean {\n    const phi_patterns = [\n      '/patients',\n      '/reports',\n      '/medical',\n      '/test-results',\n      '/diagnoses',\n      '/treatments'\n    ];\n\n    return phi_patterns.some(pattern => request.url.includes(pattern));\n  }\n\n  /**\n   * Sanitize request headers\n   */\n  private sanitizeHeaders(headers: any): any {\n    const sanitized = { ...headers };\n    \n    // Remove sensitive headers\n    delete sanitized.authorization;\n    delete sanitized.cookie;\n    delete sanitized['x-api-key'];\n    \n    return sanitized;\n  }\n\n  /**\n   * Sanitize data by removing sensitive fields\n   */\n  private sanitizeData(data: any, additionalFields: string[] = []): any {\n    if (!data || typeof data !== 'object') return data;\n    \n    const sanitized = { ...data };\n    const fieldsToRemove = [...this.sensitiveFields, ...additionalFields];\n    \n    fieldsToRemove.forEach(field => {\n      if (sanitized[field] !== undefined) {\n        sanitized[field] = '[REDACTED]';\n      }\n    });\n    \n    return sanitized;\n  }\n\n  /**\n   * Sanitize request body for HIPAA compliance\n   */\n  private sanitizeBody(body: any, hipaaCompliant: boolean): any {\n    if (!body || typeof body !== 'object') return body;\n    \n    const sanitized = this.sanitizeData(body);\n    \n    if (hipaaCompliant) {\n      this.hipaaFields.forEach(field => {\n        if (sanitized[field] !== undefined) {\n          sanitized[field] = '[PHI_REDACTED]';\n        }\n      });\n    }\n    \n    return sanitized;\n  }\n\n  /**\n   * Check if should log request body\n   */\n  private shouldLogBody(request: FastifyRequest): boolean {\n    // Don't log bodies for certain endpoints\n    const skipBodyPatterns = [\n      '/auth/login',\n      '/auth/register',\n      '/password',\n      '/upload'\n    ];\n    \n    return !skipBodyPatterns.some(pattern => request.url.includes(pattern));\n  }\n\n  /**\n   * Check if response contains sensitive data\n   */\n  private containsSensitiveData(payload: any): boolean {\n    if (!payload || typeof payload !== 'object') return false;\n    \n    const sensitivePatterns = [\n      'password', 'token', 'secret', 'key', 'hash',\n      'medicalHistory', 'diagnosis', 'testResults'\n    ];\n    \n    const jsonString = JSON.stringify(payload).toLowerCase();\n    return sensitivePatterns.some(pattern => jsonString.includes(pattern));\n  }\n\n  /**\n   * Map HTTP method to audit event type\n   */\n  private mapMethodToEventType(method: string): HipaaAuditEvent['eventType'] {\n    switch (method.toUpperCase()) {\n      case 'GET': return 'access';\n      case 'POST': return 'create';\n      case 'PUT':\n      case 'PATCH': return 'update';\n      case 'DELETE': return 'delete';\n      default: return 'access';\n    }\n  }\n\n  /**\n   * Extract resource name from URL\n   */\n  private extractResourceFromUrl(url: string): string {\n    const parts = url.split('/').filter(Boolean);\n    return parts[0] || 'unknown';\n  }\n\n  /**\n   * Create middleware factory for easy use\n   */\n  public static create(options?: LoggingOptions) {\n    const middleware = new LoggingMiddleware();\n    return {\n      correlation: middleware.correlationMiddleware(),\n      request: middleware.requestLoggingMiddleware(options),\n      response: middleware.responseLoggingMiddleware(options),\n      error: middleware.errorLoggingMiddleware()\n    };\n  }\n}"