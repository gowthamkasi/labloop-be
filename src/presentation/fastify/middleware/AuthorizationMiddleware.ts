/**\n * Authorization Middleware\n * Role-based access control and permission validation\n */\n\nimport { FastifyRequest, FastifyReply } from 'fastify';\nimport { container, TYPES } from '@/config/Container.js';\nimport { UserRolePermissions, UserRole } from '@/domain/user/UserRoles.js';\nimport { UserPermissionService, IUserPermissions } from '@/domain/user/UserPermissions.js';\nimport { InsufficientPermissionsError } from '@/domain/user/exceptions/index.js';\nimport { ILogger } from '@/shared/utils/Logger.js';\nimport { HttpStatus } from '@/shared/constants/HttpStatus.js';\n\nexport interface AuthorizationOptions {\n  resource: string;\n  action: 'create' | 'read' | 'update' | 'delete';\n  allowedRoles?: UserRole[];\n  requireLabAccess?: boolean;\n  requireHospitalAccess?: boolean;\n  requireOwnership?: boolean; // User must own the resource\n  requireSameLabAccess?: boolean; // User must have access to the same lab as the resource\n  requireSameHospitalAccess?: boolean; // User must have access to the same hospital as the resource\n}\n\nexport interface ResourceOwnershipCheck {\n  getResourceOwnerId?: (request: FastifyRequest) => Promise<string | null>;\n  getResourceLabId?: (request: FastifyRequest) => Promise<string | null>;\n  getResourceHospitalId?: (request: FastifyRequest) => Promise<string | null>;\n}\n\nexport class AuthorizationMiddleware {\n  private logger: ILogger;\n\n  constructor() {\n    this.logger = container.get<ILogger>(TYPES.Logger);\n  }\n\n  /**\n   * Role-based authorization middleware\n   */\n  public authorize(\n    options: AuthorizationOptions,\n    ownershipChecks?: ResourceOwnershipCheck\n  ) {\n    return async (request: FastifyRequest, reply: FastifyReply) => {\n      try {\n        // Ensure user is authenticated (should be done by auth middleware first)\n        if (!request.user) {\n          this.logger.error('Authorization called without authentication', {\n            path: request.url,\n            method: request.method\n          });\n          return reply.status(HttpStatus.UNAUTHORIZED).send({\n            error: 'Authentication required',\n            details: 'User must be authenticated before authorization'\n          });\n        }\n\n        const userPermissions: IUserPermissions = {\n          userId: request.user.userId,\n          role: request.user.role as UserRole,\n          labId: request.user.labId,\n          hospitalId: request.user.hospitalId,\n          isActive: true // Authenticated users are considered active\n        };\n\n        // Check basic permission for resource and action\n        const hasBasicPermission = UserPermissionService.canAccess(\n          userPermissions,\n          options.resource,\n          options.action\n        );\n\n        if (!hasBasicPermission) {\n          this.logger.warn('Access denied - insufficient basic permissions', {\n            userId: request.user.userId,\n            role: request.user.role,\n            resource: options.resource,\n            action: options.action,\n            path: request.url\n          });\n\n          return reply.status(HttpStatus.FORBIDDEN).send({\n            error: 'Insufficient permissions',\n            details: `You don't have permission to ${options.action} ${options.resource}`\n          });\n        }\n\n        // Check specific role requirements\n        if (options.allowedRoles && !options.allowedRoles.includes(userPermissions.role)) {\n          this.logger.warn('Access denied - role not allowed', {\n            userId: request.user.userId,\n            userRole: request.user.role,\n            allowedRoles: options.allowedRoles,\n            resource: options.resource,\n            path: request.url\n          });\n\n          return reply.status(HttpStatus.FORBIDDEN).send({\n            error: 'Role not authorized',\n            details: `Your role (${request.user.role}) is not authorized for this operation`\n          });\n        }\n\n        // Check lab access requirements\n        if (options.requireLabAccess && request.user.role !== UserRole.ADMIN) {\n          if (!request.user.labId) {\n            return reply.status(HttpStatus.FORBIDDEN).send({\n              error: 'Lab access required',\n              details: 'You must be assigned to a lab to perform this action'\n            });\n          }\n        }\n\n        // Check hospital access requirements\n        if (options.requireHospitalAccess && request.user.role !== UserRole.ADMIN) {\n          if (!request.user.hospitalId) {\n            return reply.status(HttpStatus.FORBIDDEN).send({\n              error: 'Hospital access required',\n              details: 'You must be assigned to a hospital to perform this action'\n            });\n          }\n        }\n\n        // Check resource ownership if required\n        if (options.requireOwnership && ownershipChecks?.getResourceOwnerId) {\n          const resourceOwnerId = await ownershipChecks.getResourceOwnerId(request);\n          if (resourceOwnerId && resourceOwnerId !== request.user.userId && request.user.role !== UserRole.ADMIN) {\n            this.logger.warn('Access denied - resource ownership required', {\n              userId: request.user.userId,\n              resourceOwnerId,\n              resource: options.resource,\n              path: request.url\n            });\n\n            return reply.status(HttpStatus.FORBIDDEN).send({\n              error: 'Access denied',\n              details: 'You can only access your own resources'\n            });\n          }\n        }\n\n        // Check same lab access if required\n        if (options.requireSameLabAccess && ownershipChecks?.getResourceLabId && request.user.role !== UserRole.ADMIN) {\n          const resourceLabId = await ownershipChecks.getResourceLabId(request);\n          if (resourceLabId && resourceLabId !== request.user.labId) {\n            this.logger.warn('Access denied - different lab access', {\n              userId: request.user.userId,\n              userLabId: request.user.labId,\n              resourceLabId,\n              resource: options.resource,\n              path: request.url\n            });\n\n            return reply.status(HttpStatus.FORBIDDEN).send({\n              error: 'Lab access denied',\n              details: 'You can only access resources from your assigned lab'\n            });\n          }\n        }\n\n        // Check same hospital access if required\n        if (options.requireSameHospitalAccess && ownershipChecks?.getResourceHospitalId && request.user.role !== UserRole.ADMIN) {\n          const resourceHospitalId = await ownershipChecks.getResourceHospitalId(request);\n          if (resourceHospitalId && resourceHospitalId !== request.user.hospitalId) {\n            this.logger.warn('Access denied - different hospital access', {\n              userId: request.user.userId,\n              userHospitalId: request.user.hospitalId,\n              resourceHospitalId,\n              resource: options.resource,\n              path: request.url\n            });\n\n            return reply.status(HttpStatus.FORBIDDEN).send({\n              error: 'Hospital access denied',\n              details: 'You can only access resources from your assigned hospital'\n            });\n          }\n        }\n\n        // Log successful authorization\n        this.logger.info('Authorization successful', {\n          userId: request.user.userId,\n          role: request.user.role,\n          resource: options.resource,\n          action: options.action,\n          path: request.url\n        });\n\n      } catch (error) {\n        this.logger.error('Authorization error', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n          userId: request.user?.userId,\n          resource: options.resource,\n          action: options.action,\n          path: request.url\n        });\n\n        return reply.status(HttpStatus.INTERNAL_SERVER_ERROR).send({\n          error: 'Authorization error',\n          details: 'An error occurred during authorization check'\n        });\n      }\n    };\n  }\n\n  /**\n   * Admin-only authorization middleware\n   */\n  public requireAdmin() {\n    return this.authorize({\n      resource: 'admin',\n      action: 'read',\n      allowedRoles: [UserRole.ADMIN]\n    });\n  }\n\n  /**\n   * Lab admin or higher authorization middleware\n   */\n  public requireLabAdmin() {\n    return this.authorize({\n      resource: 'lab_admin',\n      action: 'read',\n      allowedRoles: [UserRole.ADMIN, UserRole.LAB_ADMIN]\n    });\n  }\n\n  /**\n   * Healthcare staff authorization middleware\n   */\n  public requireHealthcareStaff() {\n    return this.authorize({\n      resource: 'healthcare',\n      action: 'read',\n      allowedRoles: [UserRole.ADMIN, UserRole.LAB_ADMIN, UserRole.LAB_TECHNICIAN, UserRole.COLLECTOR]\n    });\n  }\n\n  /**\n   * Patient data access authorization middleware\n   */\n  public requirePatientDataAccess(action: 'create' | 'read' | 'update' | 'delete' = 'read') {\n    return this.authorize({\n      resource: 'patients',\n      action,\n      requireLabAccess: true\n    });\n  }\n\n  /**\n   * Lab data access authorization middleware\n   */\n  public requireLabDataAccess(action: 'create' | 'read' | 'update' | 'delete' = 'read') {\n    return this.authorize({\n      resource: 'lab_data',\n      action,\n      requireLabAccess: true,\n      requireSameLabAccess: true\n    });\n  }\n\n  /**\n   * Bulk operations authorization middleware (admin and lab admin only)\n   */\n  public requireBulkOperationAccess() {\n    return this.authorize({\n      resource: 'bulk_operations',\n      action: 'update',\n      allowedRoles: [UserRole.ADMIN, UserRole.LAB_ADMIN]\n    });\n  }\n\n  /**\n   * Create authorization preHandler that can be used directly with Fastify routes\n   */\n  public static createPreHandler(\n    options: AuthorizationOptions,\n    ownershipChecks?: ResourceOwnershipCheck\n  ) {\n    const middleware = new AuthorizationMiddleware();\n    return middleware.authorize(options, ownershipChecks);\n  }\n\n  /**\n   * Create admin-only preHandler\n   */\n  public static createAdminPreHandler() {\n    const middleware = new AuthorizationMiddleware();\n    return middleware.requireAdmin();\n  }\n\n  /**\n   * Create lab admin preHandler\n   */\n  public static createLabAdminPreHandler() {\n    const middleware = new AuthorizationMiddleware();\n    return middleware.requireLabAdmin();\n  }\n\n  /**\n   * Create healthcare staff preHandler\n   */\n  public static createHealthcareStaffPreHandler() {\n    const middleware = new AuthorizationMiddleware();\n    return middleware.requireHealthcareStaff();\n  }\n\n  /**\n   * Permission checker utility for use in route handlers\n   */\n  public static hasPermission(\n    request: FastifyRequest,\n    resource: string,\n    action: 'create' | 'read' | 'update' | 'delete'\n  ): boolean {\n    if (!request.user) return false;\n\n    const userPermissions: IUserPermissions = {\n      userId: request.user.userId,\n      role: request.user.role as UserRole,\n      labId: request.user.labId,\n      hospitalId: request.user.hospitalId,\n      isActive: true\n    };\n\n    return UserPermissionService.canAccess(userPermissions, resource, action);\n  }\n\n  /**\n   * Get user's effective permissions for API response\n   */\n  public static getUserPermissions(request: FastifyRequest): any {\n    if (!request.user) return null;\n\n    const userPermissions: IUserPermissions = {\n      userId: request.user.userId,\n      role: request.user.role as UserRole,\n      labId: request.user.labId,\n      hospitalId: request.user.hospitalId,\n      isActive: true\n    };\n\n    return UserPermissionService.getPublicPermissions(userPermissions);\n  }\n}"