/**\n * Token Service - JWT token generation and validation\n * Healthcare-compliant token management with enhanced security\n */\n\nimport jwt from 'jsonwebtoken';\nimport { InvalidTokenError } from '../exceptions/index.js';\nimport { UserRole } from '../UserRoles.js';\n\nexport interface ITokenPayload {\n  userId: string;\n  email: string;\n  role: UserRole;\n  labId?: string;\n  hospitalId?: string;\n  tokenType: 'access' | 'refresh';\n  iat?: number;\n  exp?: number;\n}\n\nexport interface ITokenService {\n  generateAccessToken(userId: string, role: string, email?: string, labId?: string, hospitalId?: string): string;\n  generateRefreshToken(userId: string): string;\n  verifyAccessToken(token: string): ITokenPayload;\n  verifyRefreshToken(token: string): ITokenPayload;\n  getTokenExpiry(): number;\n  isTokenExpired(token: string): boolean;\n  decodeToken(token: string): ITokenPayload | null;\n}\n\nexport interface ITokenValidator {\n  validateRefreshToken(token: string): { valid: boolean; userId?: string; error?: string };\n  isTokenExpired(token: string): boolean;\n}\n\nexport class TokenService implements ITokenService, ITokenValidator {\n  private readonly accessTokenSecret: string;\n  private readonly refreshTokenSecret: string;\n  private readonly accessTokenExpiry: string = '15m'; // 15 minutes for healthcare security\n  private readonly refreshTokenExpiry: string = '7d'; // 7 days\n  private readonly issuer: string = 'labloop-healthcare';\n  private readonly audience: string = 'labloop-api';\n\n  constructor(\n    accessTokenSecret: string,\n    refreshTokenSecret: string\n  ) {\n    if (!accessTokenSecret || !refreshTokenSecret) {\n      throw new Error('Token secrets are required');\n    }\n    \n    this.accessTokenSecret = accessTokenSecret;\n    this.refreshTokenSecret = refreshTokenSecret;\n  }\n\n  public generateAccessToken(\n    userId: string,\n    role: string,\n    email?: string,\n    labId?: string,\n    hospitalId?: string\n  ): string {\n    const payload: Omit<ITokenPayload, 'iat' | 'exp'> = {\n      userId,\n      email: email || '',\n      role: role as UserRole,\n      labId,\n      hospitalId,\n      tokenType: 'access'\n    };\n\n    return jwt.sign(\n      payload,\n      this.accessTokenSecret,\n      {\n        expiresIn: this.accessTokenExpiry,\n        issuer: this.issuer,\n        audience: this.audience,\n        algorithm: 'HS256'\n      }\n    );\n  }\n\n  public generateRefreshToken(userId: string): string {\n    const payload: Omit<ITokenPayload, 'iat' | 'exp' | 'email' | 'role' | 'labId' | 'hospitalId'> = {\n      userId,\n      tokenType: 'refresh'\n    };\n\n    return jwt.sign(\n      payload,\n      this.refreshTokenSecret,\n      {\n        expiresIn: this.refreshTokenExpiry,\n        issuer: this.issuer,\n        audience: this.audience,\n        algorithm: 'HS256'\n      }\n    );\n  }\n\n  public verifyAccessToken(token: string): ITokenPayload {\n    try {\n      const decoded = jwt.verify(\n        token,\n        this.accessTokenSecret,\n        {\n          issuer: this.issuer,\n          audience: this.audience,\n          algorithms: ['HS256']\n        }\n      ) as ITokenPayload;\n\n      if (decoded.tokenType !== 'access') {\n        throw new InvalidTokenError('Invalid token type');\n      }\n\n      return decoded;\n    } catch (error) {\n      if (error instanceof jwt.JsonWebTokenError) {\n        throw new InvalidTokenError(`Invalid access token: ${error.message}`);\n      }\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new InvalidTokenError('Access token has expired');\n      }\n      throw error;\n    }\n  }\n\n  public verifyRefreshToken(token: string): ITokenPayload {\n    try {\n      const decoded = jwt.verify(\n        token,\n        this.refreshTokenSecret,\n        {\n          issuer: this.issuer,\n          audience: this.audience,\n          algorithms: ['HS256']\n        }\n      ) as ITokenPayload;\n\n      if (decoded.tokenType !== 'refresh') {\n        throw new InvalidTokenError('Invalid token type');\n      }\n\n      return decoded;\n    } catch (error) {\n      if (error instanceof jwt.JsonWebTokenError) {\n        throw new InvalidTokenError(`Invalid refresh token: ${error.message}`);\n      }\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new InvalidTokenError('Refresh token has expired');\n      }\n      throw error;\n    }\n  }\n\n  public validateRefreshToken(token: string): { valid: boolean; userId?: string; error?: string } {\n    try {\n      const decoded = this.verifyRefreshToken(token);\n      return {\n        valid: true,\n        userId: decoded.userId\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  public isTokenExpired(token: string): boolean {\n    try {\n      const decoded = this.decodeToken(token);\n      if (!decoded || !decoded.exp) {\n        return true;\n      }\n      \n      const currentTime = Math.floor(Date.now() / 1000);\n      return decoded.exp < currentTime;\n    } catch (error) {\n      return true; // Consider invalid tokens as expired\n    }\n  }\n\n  public decodeToken(token: string): ITokenPayload | null {\n    try {\n      return jwt.decode(token) as ITokenPayload;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  public getTokenExpiry(): number {\n    // Return access token expiry in seconds\n    return 15 * 60; // 15 minutes\n  }\n\n  public getRefreshTokenExpiry(): number {\n    // Return refresh token expiry in seconds\n    return 7 * 24 * 60 * 60; // 7 days\n  }\n\n  // Healthcare-specific token validation\n  public validateHealthcareToken(token: string): {\n    valid: boolean;\n    payload?: ITokenPayload;\n    hipaaCompliant: boolean;\n    securityLevel: 'low' | 'medium' | 'high';\n    warnings: string[];\n  } {\n    const warnings: string[] = [];\n    let securityLevel: 'low' | 'medium' | 'high' = 'high';\n    \n    try {\n      const payload = this.verifyAccessToken(token);\n      \n      // Check token age for healthcare compliance\n      if (payload.iat) {\n        const tokenAge = Date.now() / 1000 - payload.iat;\n        if (tokenAge > 30 * 60) { // 30 minutes\n          warnings.push('Token is older than recommended for healthcare data access');\n          securityLevel = 'medium';\n        }\n      }\n      \n      // Check if user has healthcare-specific roles\n      const healthcareRoles = [UserRole.LAB_ADMIN, UserRole.LAB_TECHNICIAN, UserRole.COLLECTOR];\n      if (!healthcareRoles.includes(payload.role) && payload.role !== UserRole.ADMIN) {\n        warnings.push('Token user does not have healthcare access role');\n        securityLevel = 'low';\n      }\n      \n      // Check for lab/hospital assignment for non-admin users\n      if (payload.role !== UserRole.ADMIN && !payload.labId && !payload.hospitalId) {\n        warnings.push('Healthcare user not assigned to lab or hospital');\n        securityLevel = 'medium';\n      }\n      \n      return {\n        valid: true,\n        payload,\n        hipaaCompliant: warnings.length === 0,\n        securityLevel,\n        warnings\n      };\n      \n    } catch (error) {\n      return {\n        valid: false,\n        hipaaCompliant: false,\n        securityLevel: 'low',\n        warnings: ['Invalid token']\n      };\n    }\n  }\n\n  // Generate API key for system-to-system communication\n  public generateApiKey(systemId: string, permissions: string[]): string {\n    const payload = {\n      systemId,\n      permissions,\n      tokenType: 'api_key',\n      iat: Math.floor(Date.now() / 1000)\n    };\n\n    return jwt.sign(\n      payload,\n      this.accessTokenSecret,\n      {\n        issuer: this.issuer,\n        audience: 'labloop-api-system',\n        algorithm: 'HS256'\n        // API keys don't expire but can be revoked\n      }\n    );\n  }\n\n  public verifyApiKey(token: string): {\n    valid: boolean;\n    systemId?: string;\n    permissions?: string[];\n  } {\n    try {\n      const decoded = jwt.verify(\n        token,\n        this.accessTokenSecret,\n        {\n          issuer: this.issuer,\n          audience: 'labloop-api-system',\n          algorithms: ['HS256']\n        }\n      ) as any;\n\n      if (decoded.tokenType !== 'api_key') {\n        return { valid: false };\n      }\n\n      return {\n        valid: true,\n        systemId: decoded.systemId,\n        permissions: decoded.permissions\n      };\n    } catch (error) {\n      return { valid: false };\n    }\n  }\n}"