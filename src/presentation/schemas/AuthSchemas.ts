/**\n * Authentication Schemas\n * JSON Schema definitions for authentication endpoints\n */\n\n// Common field definitions\nconst emailField = {\n  type: 'string',\n  format: 'email',\n  minLength: 5,\n  maxLength: 100,\n  description: 'Valid email address'\n};\n\nconst passwordField = {\n  type: 'string',\n  minLength: 8,\n  maxLength: 128,\n  description: 'Password (8-128 characters)'\n};\n\nconst refreshTokenField = {\n  type: 'string',\n  minLength: 10,\n  description: 'JWT refresh token'\n};\n\n// Login request schema\nexport const loginRequestSchema = {\n  type: 'object',\n  required: ['email', 'password'],\n  additionalProperties: false,\n  properties: {\n    email: emailField,\n    password: passwordField\n  },\n  examples: [{\n    email: 'john.doe@labloop.com',\n    password: 'SecurePassword123!'\n  }]\n};\n\n// Mobile login request schema\nexport const mobileLoginRequestSchema = {\n  type: 'object',\n  required: ['email', 'password'],\n  additionalProperties: false,\n  properties: {\n    email: emailField,\n    password: passwordField,\n    deviceId: {\n      type: 'string',\n      minLength: 1,\n      maxLength: 100,\n      description: 'Unique device identifier'\n    },\n    deviceName: {\n      type: 'string',\n      minLength: 1,\n      maxLength: 50,\n      description: 'Human-readable device name'\n    },\n    platform: {\n      type: 'string',\n      enum: ['ios', 'android'],\n      description: 'Mobile platform'\n    },\n    version: {\n      type: 'string',\n      description: 'App version'\n    },\n    model: {\n      type: 'string',\n      description: 'Device model'\n    },\n    fcmToken: {\n      type: 'string',\n      description: 'Firebase Cloud Messaging token for push notifications'\n    },\n    biometricEnabled: {\n      type: 'boolean',\n      description: 'Whether biometric authentication is enabled'\n    }\n  },\n  examples: [{\n    email: 'john.doe@labloop.com',\n    password: 'SecurePassword123!',\n    deviceId: 'device-uuid-12345',\n    deviceName: 'iPhone 14 Pro',\n    platform: 'ios',\n    fcmToken: 'fcm-token-12345',\n    biometricEnabled: true\n  }]\n};\n\n// Refresh token request schema\nexport const refreshTokenRequestSchema = {\n  type: 'object',\n  required: ['refreshToken'],\n  additionalProperties: false,\n  properties: {\n    refreshToken: refreshTokenField\n  },\n  examples: [{\n    refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n  }]\n};\n\n// Mobile registration request schema\nexport const mobileRegisterRequestSchema = {\n  type: 'object',\n  required: ['email', 'password', 'firstName', 'lastName', 'phone'],\n  additionalProperties: false,\n  properties: {\n    email: emailField,\n    password: passwordField,\n    firstName: {\n      type: 'string',\n      minLength: 1,\n      maxLength: 50,\n      description: 'First name'\n    },\n    lastName: {\n      type: 'string',\n      minLength: 1,\n      maxLength: 50,\n      description: 'Last name'\n    },\n    phone: {\n      type: 'string',\n      pattern: '^\\\\+?[1-9]\\\\d{1,14}$',\n      description: 'Phone number in international format'\n    },\n    dateOfBirth: {\n      type: 'string',\n      format: 'date',\n      description: 'Date of birth (YYYY-MM-DD)'\n    },\n    gender: {\n      type: 'string',\n      enum: ['male', 'female', 'other'],\n      description: 'Gender'\n    }\n  },\n  examples: [{\n    email: 'jane.smith@example.com',\n    password: 'SecurePassword123!',\n    firstName: 'Jane',\n    lastName: 'Smith',\n    phone: '+919876543210',\n    dateOfBirth: '1990-05-15',\n    gender: 'female'\n  }]\n};\n\n// User profile schema (for responses)\nconst userProfileSchema = {\n  type: 'object',\n  properties: {\n    firstName: { type: 'string' },\n    lastName: { type: 'string' },\n    phone: { type: 'string' },\n    dateOfBirth: { type: 'string', format: 'date' },\n    gender: {\n      type: 'string',\n      enum: ['male', 'female', 'other']\n    },\n    address: {\n      type: 'object',\n      properties: {\n        street: { type: 'string' },\n        city: { type: 'string' },\n        state: { type: 'string' },\n        zipCode: { type: 'string' },\n        country: { type: 'string', default: 'India' }\n      }\n    }\n  }\n};\n\n// Login response schema\nexport const loginResponseSchema = {\n  type: 'object',\n  required: ['user', 'token', 'expiresIn', 'message'],\n  properties: {\n    user: {\n      type: 'object',\n      required: ['_id', 'username', 'email', 'role'],\n      properties: {\n        _id: { type: 'string', format: 'objectId' },\n        username: { type: 'string' },\n        email: { type: 'string', format: 'email' },\n        role: {\n          type: 'string',\n          enum: ['admin', 'lab_admin', 'lab_technician', 'collector', 'viewer']\n        },\n        profile: userProfileSchema,\n        labId: { type: 'string', format: 'objectId' },\n        labName: { type: 'string' },\n        hospitalId: { type: 'string', format: 'objectId' },\n        hospitalName: { type: 'string' },\n        permissions: { type: 'object' },\n        needsPasswordReset: { type: 'boolean' },\n        needsHipaaTraining: { type: 'boolean' }\n      }\n    },\n    token: { type: 'string', description: 'JWT access token' },\n    expiresIn: { type: 'integer', description: 'Token expiry in seconds' },\n    message: { type: 'string' }\n  }\n};\n\n// Mobile login response schema\nexport const mobileLoginResponseSchema = {\n  type: 'object',\n  required: ['success', 'data', 'message', 'timestamp'],\n  properties: {\n    success: { type: 'boolean' },\n    data: {\n      type: 'object',\n      required: ['user', 'tokens'],\n      properties: {\n        user: {\n          type: 'object',\n          required: ['id', 'email', 'name', 'role'],\n          properties: {\n            id: { type: 'string' },\n            email: { type: 'string', format: 'email' },\n            name: { type: 'string' },\n            role: { type: 'string' },\n            profile: {\n              type: 'object',\n              properties: {\n                firstName: { type: 'string' },\n                lastName: { type: 'string' },\n                phone: { type: 'string' },\n                avatar: { type: 'string', format: 'uri', nullable: true }\n              }\n            },\n            healthProfile: {\n              type: 'object',\n              properties: {\n                height: { type: 'number', nullable: true },\n                weight: { type: 'number', nullable: true },\n                bloodGroup: { type: 'string', nullable: true },\n                allergies: {\n                  type: 'array',\n                  items: { type: 'string' }\n                },\n                medications: {\n                  type: 'array',\n                  items: { type: 'string' }\n                }\n              }\n            }\n          }\n        },\n        tokens: {\n          type: 'object',\n          required: ['accessToken', 'refreshToken', 'expiresIn'],\n          properties: {\n            accessToken: { type: 'string' },\n            refreshToken: { type: 'string' },\n            expiresIn: { type: 'integer' }\n          }\n        }\n      }\n    },\n    message: { type: 'string' },\n    timestamp: { type: 'string', format: 'date-time' }\n  }\n};\n\n// Refresh token response schema\nexport const refreshTokenResponseSchema = {\n  type: 'object',\n  required: ['success', 'data', 'message'],\n  properties: {\n    success: { type: 'boolean' },\n    data: {\n      type: 'object',\n      required: ['accessToken', 'refreshToken', 'expiresIn'],\n      properties: {\n        accessToken: { type: 'string' },\n        refreshToken: { type: 'string' },\n        expiresIn: { type: 'integer' }\n      }\n    },\n    message: { type: 'string' }\n  }\n};\n\n// Session verification response schema\nexport const sessionVerifyResponseSchema = {\n  type: 'object',\n  required: ['authenticated'],\n  properties: {\n    authenticated: { type: 'boolean' },\n    user: {\n      type: 'object',\n      properties: {\n        _id: { type: 'string' },\n        email: { type: 'string', format: 'email' },\n        role: { type: 'string' },\n        labId: { type: 'string' },\n        hospitalId: { type: 'string' }\n      }\n    }\n  }\n};\n\n// Logout response schema\nexport const logoutResponseSchema = {\n  type: 'object',\n  required: ['message'],\n  properties: {\n    message: { type: 'string' },\n    success: { type: 'boolean' }\n  }\n};\n\n// Error response schema\nexport const authErrorResponseSchema = {\n  type: 'object',\n  required: ['error'],\n  properties: {\n    error: { type: 'string' },\n    details: { type: 'string' },\n    code: { type: 'string' }\n  }\n};\n\n// Mobile error response schema\nexport const mobileErrorResponseSchema = {\n  type: 'object',\n  required: ['success', 'error', 'message', 'timestamp'],\n  properties: {\n    success: { type: 'boolean', const: false },\n    error: { type: 'string' },\n    message: { type: 'string' },\n    timestamp: { type: 'string', format: 'date-time' }\n  }\n};\n\n// Mobile profile response schema\nexport const mobileProfileResponseSchema = {\n  type: 'object',\n  required: ['success', 'data'],\n  properties: {\n    success: { type: 'boolean' },\n    data: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n        email: { type: 'string', format: 'email' },\n        name: { type: 'string' },\n        role: { type: 'string' },\n        profile: {\n          type: 'object',\n          properties: {\n            firstName: { type: 'string' },\n            lastName: { type: 'string' },\n            phone: { type: 'string' },\n            avatar: { type: 'string', format: 'uri', nullable: true }\n          }\n        },\n        healthProfile: {\n          type: 'object',\n          properties: {\n            height: { type: 'number', nullable: true },\n            weight: { type: 'number', nullable: true },\n            bloodGroup: { type: 'string', nullable: true },\n            allergies: {\n              type: 'array',\n              items: { type: 'string' }\n            },\n            medications: {\n              type: 'array',\n              items: { type: 'string' }\n            }\n          }\n        }\n      }\n    }\n  }\n};"